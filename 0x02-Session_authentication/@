#!/usr/bin/env python3
"""Auth module for handling authentication logic.
"""

from flask import request
from typing import List, TypeVar


class Auth:
    """Authentication class for managing API auth requirements."""

    def require_auth(self, path: str, excluded_paths: List[str]) -> bool:
        """
        Determines if authentication is required for a given path.

        Args:
            path (str): The path of the request.
            excluded_paths (List[str]): List of paths that do not require authentication.

        Returns:
            bool: True if authentication is required, False otherwise.
        """
        if path is None or excluded_paths is None or len(excluded_paths) == 0:
            return True

        # Normalize the path to always end with '/'
        if not path.endswith('/'):
            path += '/'

        for ex_path in excluded_paths:
            # Normalize excluded path
            if not ex_path.endswith('/'):
                ex_path += '/'

            if ex_path.endswith('*'):
                # Remove the wildcard and check prefix
                if path.startswith(ex_path[:-1]):
                    return False
            elif path == ex_path:
                return False

        return True

    def authorization_header(self, request=None) -> str:
        """
        Extracts the Authorization header from a Flask request object.

        Args:
            request: Flask request object.

        Returns:
            str: The value of the Authorization header, or None if not present.
        """
        if request is None:
            return None

        return request.headers.get('Authorization', None)

    def current_user(self, request=None) -> TypeVar('User'):
        """
        Retrieves the current user based on the request.

        Args:
            request: Flask request object.

        Returns:
            User or None
        """
        return None
